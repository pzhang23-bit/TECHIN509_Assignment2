# -*- coding: utf-8 -*-
"""TECHIN512_Assignment2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1934Hmt9v31G1UfGbgFx8zmPkhKXZuPv7
"""

original_message = "010"
secret_key = "110"

# first
first_digit_orig_msg = int(original_message[0])
first_digit_secret_key = int(secret_key[0])
first_digit_encrypt_msg = str(first_digit_orig_msg ^ first_digit_secret_key)
print("The first digits of original message and secret key are {} and {}, respectively.".format(first_digit_orig_msg, first_digit_secret_key))
print("The first digit of encrypted message is {}.".format(first_digit_encrypt_msg))

# sec
second_digit_orig_msg = int(original_message[1])
second_digit_secret_key = int(secret_key[1])
second_digit_encrypt_msg = str(second_digit_orig_msg ^ second_digit_secret_key)
print("The second digits of original message and secret key are {} and {}, respectively.".format(second_digit_orig_msg, second_digit_secret_key))
print("The second digit of encrypted message is {}.".format(second_digit_encrypt_msg))

# 3rd
third_digit_orig_msg = int(original_message[2])
third_digit_secret_key = int(secret_key[2])
third_digit_encrypt_msg = str(third_digit_orig_msg ^ third_digit_secret_key)
print("The third digits of original message and secret key are {} and {}, respectively.".format(third_digit_orig_msg, third_digit_secret_key))
print("The third digit of encrypted message is {}.".format(third_digit_encrypt_msg))

# Assemble into a complete message
encrypted_msg = first_digit_encrypt_msg + second_digit_encrypt_msg + third_digit_encrypt_msg
print("The encrypted message is {}".format(encrypted_msg))

# solvemessage
decrypted_msg = ""
for i in range(len(encrypted_msg)):
    decrypted_digit = str(int(encrypted_msg[i]) ^ int(secret_key[i]))
    decrypted_msg += decrypted_digit
print("The decrypted message is {}".format(decrypted_msg))

"""Prob 1:


1- Is the encrypted message the same as the original message?

No.The encrypted message "100" is different from the original message "010".

2-Can you briefly describe the functionality of xor gate?

If the inputs are different, the XOR gate outputs 1, if the inputs are the same, the outputs would be 0.

3- What will happen when the inputs are the same (or different)?

Would be 0

4- Do you think if the adversary can know the original message without knowing the secret key?
No


5- Can the message receiver recover the original message if the secret key is given?
Yes


"""

# known numbers
p = 61
q = 53
M = 65
e = 17

# calculate n and Ï†(n)
n = p * q
phi_n = (p - 1) * (q - 1)

# key d
d = pow(e, -1, phi_n)

# add keys,en-public key, d-secret key
C = pow(M, e, n)
print("Public key (e,n):", (e, n))
print("Private key d:", d)
print("Ciphertext C:", C)

# solve
M_decrypted = pow(C, d, n)
print("Decrypted message:", M_decrypted)

# test
if M_decrypted == M:
    print("Decryption successful! Original message recovered.")
else:
    print("Decryption failed.")